#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.
require 'nanoc-redirector'


compile '/assets/img/*' do
end

compile '/assets/**/all*' do
  filter :erb
end

compile '/assets/css/*' do
  unless @config[:debug]
    filter :rainpress
  end
end

compile '/assets/js/*' do
  unless @config[:debug]
    filter :uglify_js
  end
end

compile '/content/toc*' do
  filter :kramdown
  layout '/blank.*'
end

compile '/content/footer*' do
  layout '/blank.*'
end

compile '/content/**/*.md' do
  filter :kramdown, {:input => 'GFM'}
  filter :colorize_syntax, :default_colorizer => :pygmentize
  filter :relativize_paths, :type => :html
  layout '/default.*'
end

compile '/content/**/*' do
  filter :erb
  layout '/default.*'
end

route '/assets/css/*' do
  # if not debug mode, only let all.css through
  unless @config[:debug] 
    item.identifier.without_ext + '.css' if File.basename(item[:content_filename], ".*") == 'all' 
  else
    item.identifier.without_ext + '.css'
  end
end

route '/assets/js/*' do
  # if not debug mode, only let all.js through
  unless @config[:debug]
    item.identifier.without_ext + '.js' if File.basename(item[:content_filename], ".*") == 'all'
  else
    item.identifier.without_ext + '.js'
  end
end


route '/content/**/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    '/' + item.identifier.without_ext.to_s.sub("/content", "") + '.' + item[:extension]
  elsif item.identifier =~ /.*index.*/i
    '/index.html'
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier.without_ext.to_s.sub("/content", "") + '/index.html'
  end
end

postprocess do
  @items.each do |item|
    NanocRedirector::RedirectFrom.process(item, item.path)
  end
end

layout '**/*', :erb
